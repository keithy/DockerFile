#!/usr/bin/env ruby
#
# stuff it is helpful to know!
#https://medium.com/zendesk-engineering/running-a-child-process-in-ruby-properly-febd0a2b6ec8
#https://nickcharlton.net/posts/ruby-subprocesses-with-stdout-stderr-streams.html

require "thor"
require "pp"
require "rio"
require './lib/rio+'
require "rake"
require 'shell'
require 'fileutils'
require './lib/thord'
#require 'ruby-progressbar'
#
# gem install net-ssh-shell
# https://github.com/mitchellh/net-ssh-shell
require 'net/ssh'
require 'net/ssh/shell'

class Server
	def initialize( hostname )
		@host = hostname || 'localhost'
		self.webroot
		@list = {};
  end

	def webroot( dir = nil )
		@webroot = rio(dir || "/var/www/html")
  end

	def findSites( match , depth )

      match ||= 'PrivacyPolicy.php'
      depth ||= 4

      @webroot.shell3( 'find', @webroot.to_s, '-name', match , '-type', 'f', '--max-depth', depth.to_s ) {
		  |stdout, stderr, thread|
			if (!stdout.nil?) then
				found = rio(stdout).dirname
				name = found.filename
				if (name == 'httpdocs') then
					name = found.dirname.filename
				end
				@list[name] = found
			end
    		if (!stderr.nil?) then
				return stderr
			end
		}
		return true
	end
	def list
		@list
	end
end

class Site
  def self.all
    RIO.cwd.all.files('Dockerfile').collect {|df| self.new(df)}
  end

  def self.all
    RIO.cwd.all.files('Dockerfile').collect {|df| self.new(df)}
  end

  def self.matching(match)
    Box.all.select {|box| box.name.match(match)}
  end

  def p_name
    print name()
    yield if block_given?
    print "\n" unless $Verbose
  end

  def initialize(df)
    @dockerfile = df
    @home = @dockerfile.dirname
  end

  def name
    @home.filename.to_s
  end

  def dockerfile_size
    @df.size
  end

  def build3(options)
    @home.shell3('docker', 'build', '-t', name(), @home.to_str) do |stdout, stderr, thread|
      puts "stdout: #{stdout}" # => "simple output"
      puts "stderr: #{stderr}" # => "error: an error happened"
      puts "pid: #{thread.pid}" # => 12345
    end
  end

  def build &block
    @home.shell2e('docker', 'build', '-t', name(), @home.to_str, &block)
  end

  def to_s
    @home.to_s
  end
end

class EditSites < Thord

  desc "list <match>", "list sites"
  method_option :verbose, :type => :boolean, :aliases => '-v'
  method_option :host, :type => :string
  method_option :webroot, :type => :string, :desc => 'root of websites'
  method_option :depth, :type => :numeric, :default => 4, :desc => 'search depth'
  
  def list(match = nil)
    @server = Server.new(options[:host])
	  @server.webroot(options[:webroot])

 	  result = @server.findSites(match, options[:depth])
	
	if (result != true) then
		exit(result)
		end
	puts @server.list.to_s
  end

  desc "run", "run containers"

  def launch(match = '.*')
    puts "I'm a run task!"
  end

  desc "start", "start containers"

  def start(match = '.*')
    puts "I'm a start task!"
  end

  desc "stop", "stop containers"

  def stop(match = '.*')
    puts "I'm a stop task!"
  end

  desc "clean", "clean all containers"

  def clean(match = '.*')
    puts "I'm a clean task!"
  end

  desc "sh", "run stuff"

  def sh(*cmd)
    puts "I'm a sh task!"
    puts RIO.cwd
    puts RIO.cwd.shell2e(*cmd) {|line|
      puts line
    }
  end

  no_commands {
    def p_name(obj)
      print
      yield if block_given?
      print "\n" unless $Verbose
    end
  }

  def self.source_root
    File.dirname(__FILE__)
  end
end

EditSites.start